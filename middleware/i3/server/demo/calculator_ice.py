# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `calculator.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module demo
_M_demo = Ice.openModule('demo')
__name__ = 'demo'

if 'operation' not in _M_demo.__dict__:
    _M_demo.operation = Ice.createTempClass()
    class operation(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    operation.MIN = operation("MIN", 0)
    operation.MAX = operation("MAX", 1)
    operation.AVG = operation("AVG", 2)
    operation._enumerators = { 0:operation.MIN, 1:operation.MAX, 2:operation.AVG }

    _M_demo._t_operation = IcePy.defineEnum('::demo::operation', operation, (), operation._enumerators)

    _M_demo.operation = operation
    del operation

if 'OutOfBounds' not in _M_demo.__dict__:
    _M_demo.OutOfBounds = Ice.createTempClass()
    class OutOfBounds(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::demo::OutOfBounds'

    _M_demo._t_OutOfBounds = IcePy.defineException('::demo::OutOfBounds', OutOfBounds, (), False, None, ())
    OutOfBounds._ice_type = _M_demo._t_OutOfBounds

    _M_demo.OutOfBounds = OutOfBounds
    del OutOfBounds

if 'A' not in _M_demo.__dict__:
    _M_demo.A = Ice.createTempClass()
    class A(object):
        def __init__(self, a=0, d=''):
            self.a = a
            self.d = d

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.a)
            _h = 5 * _h + Ice.getHash(self.d)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_demo.A):
                return NotImplemented
            else:
                if self.a is None or other.a is None:
                    if self.a != other.a:
                        return (-1 if self.a is None else 1)
                else:
                    if self.a < other.a:
                        return -1
                    elif self.a > other.a:
                        return 1
                if self.d is None or other.d is None:
                    if self.d != other.d:
                        return (-1 if self.d is None else 1)
                else:
                    if self.d < other.d:
                        return -1
                    elif self.d > other.d:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_demo._t_A)

        __repr__ = __str__

    _M_demo._t_A = IcePy.defineStruct('::demo::A', A, (), (
        ('a', (), IcePy._t_int),
        ('d', (), IcePy._t_string)
    ))

    _M_demo.A = A
    del A

_M_demo._t_Calc = IcePy.defineValue('::demo::Calc', Ice.Value, -1, (), False, True, None, ())

if 'CalcPrx' not in _M_demo.__dict__:
    _M_demo.CalcPrx = Ice.createTempClass()
    class CalcPrx(Ice.ObjectPrx):

        def add(self, a, b, context=None):
            return _M_demo.Calc._op_add.invoke(self, ((a, b), context))

        def addAsync(self, a, b, context=None):
            return _M_demo.Calc._op_add.invokeAsync(self, ((a, b), context))

        def begin_add(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_demo.Calc._op_add.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_add(self, _r):
            return _M_demo.Calc._op_add.end(self, _r)

        def subtract(self, a, b, context=None):
            return _M_demo.Calc._op_subtract.invoke(self, ((a, b), context))

        def subtractAsync(self, a, b, context=None):
            return _M_demo.Calc._op_subtract.invokeAsync(self, ((a, b), context))

        def begin_subtract(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_demo.Calc._op_subtract.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_subtract(self, _r):
            return _M_demo.Calc._op_subtract.end(self, _r)

        def op(self, a1, b1, context=None):
            return _M_demo.Calc._op_op.invoke(self, ((a1, b1), context))

        def opAsync(self, a1, b1, context=None):
            return _M_demo.Calc._op_op.invokeAsync(self, ((a1, b1), context))

        def begin_op(self, a1, b1, _response=None, _ex=None, _sent=None, context=None):
            return _M_demo.Calc._op_op.begin(self, ((a1, b1), _response, _ex, _sent, context))

        def end_op(self, _r):
            return _M_demo.Calc._op_op.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_demo.CalcPrx.ice_checkedCast(proxy, '::demo::Calc', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_demo.CalcPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::demo::Calc'
    _M_demo._t_CalcPrx = IcePy.defineProxy('::demo::Calc', CalcPrx)

    _M_demo.CalcPrx = CalcPrx
    del CalcPrx

    _M_demo.Calc = Ice.createTempClass()
    class Calc(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::demo::Calc')

        def ice_id(self, current=None):
            return '::demo::Calc'

        @staticmethod
        def ice_staticId():
            return '::demo::Calc'

        def add(self, a, b, current=None):
            raise NotImplementedError("servant method 'add' not implemented")

        def subtract(self, a, b, current=None):
            raise NotImplementedError("servant method 'subtract' not implemented")

        def op(self, a1, b1, current=None):
            raise NotImplementedError("servant method 'op' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_demo._t_CalcDisp)

        __repr__ = __str__

    _M_demo._t_CalcDisp = IcePy.defineClass('::demo::Calc', Calc, (), None, ())
    Calc._ice_type = _M_demo._t_CalcDisp

    Calc._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_long, False, 0), ())
    Calc._op_subtract = IcePy.Operation('subtract', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_long, False, 0), ())
    Calc._op_op = IcePy.Operation('op', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_demo._t_A, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_demo._t_A, False, 0), ())

    _M_demo.Calc = Calc
    del Calc

# End of module demo
