# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `catalogue.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module catalogue
_M_catalogue = Ice.openModule('catalogue')
__name__ = 'catalogue'

_M_catalogue._t_Car = IcePy.defineValue('::catalogue::Car', Ice.Value, -1, (), False, True, None, ())

if 'CarPrx' not in _M_catalogue.__dict__:
    _M_catalogue.CarPrx = Ice.createTempClass()
    class CarPrx(Ice.ObjectPrx):

        def getHorsepower(self, context=None):
            return _M_catalogue.Car._op_getHorsepower.invoke(self, ((), context))

        def getHorsepowerAsync(self, context=None):
            return _M_catalogue.Car._op_getHorsepower.invokeAsync(self, ((), context))

        def begin_getHorsepower(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_catalogue.Car._op_getHorsepower.begin(self, ((), _response, _ex, _sent, context))

        def end_getHorsepower(self, _r):
            return _M_catalogue.Car._op_getHorsepower.end(self, _r)

        def getPrice(self, context=None):
            return _M_catalogue.Car._op_getPrice.invoke(self, ((), context))

        def getPriceAsync(self, context=None):
            return _M_catalogue.Car._op_getPrice.invokeAsync(self, ((), context))

        def begin_getPrice(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_catalogue.Car._op_getPrice.begin(self, ((), _response, _ex, _sent, context))

        def end_getPrice(self, _r):
            return _M_catalogue.Car._op_getPrice.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_catalogue.CarPrx.ice_checkedCast(proxy, '::catalogue::Car', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_catalogue.CarPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::catalogue::Car'
    _M_catalogue._t_CarPrx = IcePy.defineProxy('::catalogue::Car', CarPrx)

    _M_catalogue.CarPrx = CarPrx
    del CarPrx

    _M_catalogue.Car = Ice.createTempClass()
    class Car(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::catalogue::Car')

        def ice_id(self, current=None):
            return '::catalogue::Car'

        @staticmethod
        def ice_staticId():
            return '::catalogue::Car'

        def getHorsepower(self, current=None):
            raise NotImplementedError("servant method 'getHorsepower' not implemented")

        def getPrice(self, current=None):
            raise NotImplementedError("servant method 'getPrice' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_catalogue._t_CarDisp)

        __repr__ = __str__

    _M_catalogue._t_CarDisp = IcePy.defineClass('::catalogue::Car', Car, (), None, ())
    Car._ice_type = _M_catalogue._t_CarDisp

    Car._op_getHorsepower = IcePy.Operation('getHorsepower', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Car._op_getPrice = IcePy.Operation('getPrice', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_catalogue.Car = Car
    del Car

_M_catalogue._t_SuperCar = IcePy.defineValue('::catalogue::SuperCar', Ice.Value, -1, (), False, True, None, ())

if 'SuperCarPrx' not in _M_catalogue.__dict__:
    _M_catalogue.SuperCarPrx = Ice.createTempClass()
    class SuperCarPrx(_M_catalogue.CarPrx):

        def getSeats(self, context=None):
            return _M_catalogue.SuperCar._op_getSeats.invoke(self, ((), context))

        def getSeatsAsync(self, context=None):
            return _M_catalogue.SuperCar._op_getSeats.invokeAsync(self, ((), context))

        def begin_getSeats(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_catalogue.SuperCar._op_getSeats.begin(self, ((), _response, _ex, _sent, context))

        def end_getSeats(self, _r):
            return _M_catalogue.SuperCar._op_getSeats.end(self, _r)

        def getFuelUse(self, context=None):
            return _M_catalogue.SuperCar._op_getFuelUse.invoke(self, ((), context))

        def getFuelUseAsync(self, context=None):
            return _M_catalogue.SuperCar._op_getFuelUse.invokeAsync(self, ((), context))

        def begin_getFuelUse(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_catalogue.SuperCar._op_getFuelUse.begin(self, ((), _response, _ex, _sent, context))

        def end_getFuelUse(self, _r):
            return _M_catalogue.SuperCar._op_getFuelUse.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_catalogue.SuperCarPrx.ice_checkedCast(proxy, '::catalogue::SuperCar', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_catalogue.SuperCarPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::catalogue::SuperCar'
    _M_catalogue._t_SuperCarPrx = IcePy.defineProxy('::catalogue::SuperCar', SuperCarPrx)

    _M_catalogue.SuperCarPrx = SuperCarPrx
    del SuperCarPrx

    _M_catalogue.SuperCar = Ice.createTempClass()
    class SuperCar(_M_catalogue.Car):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::catalogue::Car', '::catalogue::SuperCar')

        def ice_id(self, current=None):
            return '::catalogue::SuperCar'

        @staticmethod
        def ice_staticId():
            return '::catalogue::SuperCar'

        def getSeats(self, current=None):
            raise NotImplementedError("servant method 'getSeats' not implemented")

        def getFuelUse(self, current=None):
            raise NotImplementedError("servant method 'getFuelUse' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_catalogue._t_SuperCarDisp)

        __repr__ = __str__

    _M_catalogue._t_SuperCarDisp = IcePy.defineClass('::catalogue::SuperCar', SuperCar, (), None, (_M_catalogue._t_CarDisp,))
    SuperCar._ice_type = _M_catalogue._t_SuperCarDisp

    SuperCar._op_getSeats = IcePy.Operation('getSeats', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    SuperCar._op_getFuelUse = IcePy.Operation('getFuelUse', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_catalogue.SuperCar = SuperCar
    del SuperCar

_M_catalogue._t_OffroadCar = IcePy.defineValue('::catalogue::OffroadCar', Ice.Value, -1, (), False, True, None, ())

if 'OffroadCarPrx' not in _M_catalogue.__dict__:
    _M_catalogue.OffroadCarPrx = Ice.createTempClass()
    class OffroadCarPrx(_M_catalogue.CarPrx):

        def getExtraWheels(self, context=None):
            return _M_catalogue.OffroadCar._op_getExtraWheels.invoke(self, ((), context))

        def getExtraWheelsAsync(self, context=None):
            return _M_catalogue.OffroadCar._op_getExtraWheels.invokeAsync(self, ((), context))

        def begin_getExtraWheels(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_catalogue.OffroadCar._op_getExtraWheels.begin(self, ((), _response, _ex, _sent, context))

        def end_getExtraWheels(self, _r):
            return _M_catalogue.OffroadCar._op_getExtraWheels.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_catalogue.OffroadCarPrx.ice_checkedCast(proxy, '::catalogue::OffroadCar', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_catalogue.OffroadCarPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::catalogue::OffroadCar'
    _M_catalogue._t_OffroadCarPrx = IcePy.defineProxy('::catalogue::OffroadCar', OffroadCarPrx)

    _M_catalogue.OffroadCarPrx = OffroadCarPrx
    del OffroadCarPrx

    _M_catalogue.OffroadCar = Ice.createTempClass()
    class OffroadCar(_M_catalogue.Car):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::catalogue::Car', '::catalogue::OffroadCar')

        def ice_id(self, current=None):
            return '::catalogue::OffroadCar'

        @staticmethod
        def ice_staticId():
            return '::catalogue::OffroadCar'

        def getExtraWheels(self, current=None):
            raise NotImplementedError("servant method 'getExtraWheels' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_catalogue._t_OffroadCarDisp)

        __repr__ = __str__

    _M_catalogue._t_OffroadCarDisp = IcePy.defineClass('::catalogue::OffroadCar', OffroadCar, (), None, (_M_catalogue._t_CarDisp,))
    OffroadCar._ice_type = _M_catalogue._t_OffroadCarDisp

    OffroadCar._op_getExtraWheels = IcePy.Operation('getExtraWheels', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_catalogue.OffroadCar = OffroadCar
    del OffroadCar

_M_catalogue._t_ElectricCar = IcePy.defineValue('::catalogue::ElectricCar', Ice.Value, -1, (), False, True, None, ())

if 'ElectricCarPrx' not in _M_catalogue.__dict__:
    _M_catalogue.ElectricCarPrx = Ice.createTempClass()
    class ElectricCarPrx(Ice.ObjectPrx):

        def getBatteries(self, context=None):
            return _M_catalogue.ElectricCar._op_getBatteries.invoke(self, ((), context))

        def getBatteriesAsync(self, context=None):
            return _M_catalogue.ElectricCar._op_getBatteries.invokeAsync(self, ((), context))

        def begin_getBatteries(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_catalogue.ElectricCar._op_getBatteries.begin(self, ((), _response, _ex, _sent, context))

        def end_getBatteries(self, _r):
            return _M_catalogue.ElectricCar._op_getBatteries.end(self, _r)

        def getElectricityUse(self, context=None):
            return _M_catalogue.ElectricCar._op_getElectricityUse.invoke(self, ((), context))

        def getElectricityUseAsync(self, context=None):
            return _M_catalogue.ElectricCar._op_getElectricityUse.invokeAsync(self, ((), context))

        def begin_getElectricityUse(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_catalogue.ElectricCar._op_getElectricityUse.begin(self, ((), _response, _ex, _sent, context))

        def end_getElectricityUse(self, _r):
            return _M_catalogue.ElectricCar._op_getElectricityUse.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_catalogue.ElectricCarPrx.ice_checkedCast(proxy, '::catalogue::ElectricCar', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_catalogue.ElectricCarPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::catalogue::ElectricCar'
    _M_catalogue._t_ElectricCarPrx = IcePy.defineProxy('::catalogue::ElectricCar', ElectricCarPrx)

    _M_catalogue.ElectricCarPrx = ElectricCarPrx
    del ElectricCarPrx

    _M_catalogue.ElectricCar = Ice.createTempClass()
    class ElectricCar(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::catalogue::ElectricCar')

        def ice_id(self, current=None):
            return '::catalogue::ElectricCar'

        @staticmethod
        def ice_staticId():
            return '::catalogue::ElectricCar'

        def getBatteries(self, current=None):
            raise NotImplementedError("servant method 'getBatteries' not implemented")

        def getElectricityUse(self, current=None):
            raise NotImplementedError("servant method 'getElectricityUse' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_catalogue._t_ElectricCarDisp)

        __repr__ = __str__

    _M_catalogue._t_ElectricCarDisp = IcePy.defineClass('::catalogue::ElectricCar', ElectricCar, (), None, ())
    ElectricCar._ice_type = _M_catalogue._t_ElectricCarDisp

    ElectricCar._op_getBatteries = IcePy.Operation('getBatteries', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    ElectricCar._op_getElectricityUse = IcePy.Operation('getElectricityUse', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_catalogue.ElectricCar = ElectricCar
    del ElectricCar

_M_catalogue._t_Motorbike = IcePy.defineValue('::catalogue::Motorbike', Ice.Value, -1, (), False, True, None, ())

if 'MotorbikePrx' not in _M_catalogue.__dict__:
    _M_catalogue.MotorbikePrx = Ice.createTempClass()
    class MotorbikePrx(Ice.ObjectPrx):

        def getAcceleration(self, context=None):
            return _M_catalogue.Motorbike._op_getAcceleration.invoke(self, ((), context))

        def getAccelerationAsync(self, context=None):
            return _M_catalogue.Motorbike._op_getAcceleration.invokeAsync(self, ((), context))

        def begin_getAcceleration(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_catalogue.Motorbike._op_getAcceleration.begin(self, ((), _response, _ex, _sent, context))

        def end_getAcceleration(self, _r):
            return _M_catalogue.Motorbike._op_getAcceleration.end(self, _r)

        def getWheels(self, context=None):
            return _M_catalogue.Motorbike._op_getWheels.invoke(self, ((), context))

        def getWheelsAsync(self, context=None):
            return _M_catalogue.Motorbike._op_getWheels.invokeAsync(self, ((), context))

        def begin_getWheels(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_catalogue.Motorbike._op_getWheels.begin(self, ((), _response, _ex, _sent, context))

        def end_getWheels(self, _r):
            return _M_catalogue.Motorbike._op_getWheels.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_catalogue.MotorbikePrx.ice_checkedCast(proxy, '::catalogue::Motorbike', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_catalogue.MotorbikePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::catalogue::Motorbike'
    _M_catalogue._t_MotorbikePrx = IcePy.defineProxy('::catalogue::Motorbike', MotorbikePrx)

    _M_catalogue.MotorbikePrx = MotorbikePrx
    del MotorbikePrx

    _M_catalogue.Motorbike = Ice.createTempClass()
    class Motorbike(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::catalogue::Motorbike')

        def ice_id(self, current=None):
            return '::catalogue::Motorbike'

        @staticmethod
        def ice_staticId():
            return '::catalogue::Motorbike'

        def getAcceleration(self, current=None):
            raise NotImplementedError("servant method 'getAcceleration' not implemented")

        def getWheels(self, current=None):
            raise NotImplementedError("servant method 'getWheels' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_catalogue._t_MotorbikeDisp)

        __repr__ = __str__

    _M_catalogue._t_MotorbikeDisp = IcePy.defineClass('::catalogue::Motorbike', Motorbike, (), None, ())
    Motorbike._ice_type = _M_catalogue._t_MotorbikeDisp

    Motorbike._op_getAcceleration = IcePy.Operation('getAcceleration', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Motorbike._op_getWheels = IcePy.Operation('getWheels', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_catalogue.Motorbike = Motorbike
    del Motorbike

# End of module catalogue
